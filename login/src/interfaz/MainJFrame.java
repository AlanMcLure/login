/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import java.awt.Dimension;

import business.Person;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JOptionPane;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 * Clase MainJFrame: está clase se utiliza para la interfaz del manejo de los
 * perfiles, donde se encuentran los botones de creación y visualización de los
 * perfiles, cargar o guardarlos en un fichero y la navegación entre perfiles
 * 
 * @author Alan McLure Alarcón
 * @version 21/03/2023
 */
public class MainJFrame extends javax.swing.JFrame {

	/**
	 * numPerfil (tipo int): en el que guardamos el número de perfil
	 */
	public static int numPerfil = -1;
	/**
	 * person (tipo Person): en el que guardamos los datos de la persona
	 */
	public static Person person;
	/**
	 * lista (tipo List): lista en la que guardamos los objetos person con las
	 * personas
	 */
	public static List<Person> lista = new ArrayList<>(); // que sea publico y estatico para poder verlo desde otros
															// archivos

	/**
	 * Consctructor: Crea un nuevo formulario MainJFrame
	 */
	public MainJFrame() {
		initComponents();
	}

	/**
	 * La función inicia los componentes
	 */
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jSplitPane1 = new javax.swing.JSplitPane();
		controlJPanel = new javax.swing.JPanel();
		btnCrearPerfil = new javax.swing.JButton();
		btnVerPerfil = new javax.swing.JButton();
		displayJPanel = new javax.swing.JPanel();
		btnCargarPerfil = new javax.swing.JButton();
		btnGuardarPerfil = new javax.swing.JButton();
		btnAnterior = new javax.swing.JButton();
		btnSiguiente = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		btnCrearPerfil.setText("Crear Perfil");
		btnCrearPerfil.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				crearPerfilActionPerformed(evt);
			}
		});

		btnVerPerfil.setText("Ver Perfil");
		btnVerPerfil.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				verPerfilActionPerformed(evt);
			}
		});

		btnCargarPerfil.setText("Cargar Perfil/es");
		btnCargarPerfil.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cargarPerfilActionPerformed(evt);
			}
		});

		btnGuardarPerfil.setText("Guardar Perfil/es");
		btnGuardarPerfil.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				guardarPerfilActionPerformed(evt);
			}
		});

		btnAnterior.setText("Anterior");
		btnAnterior.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anteriorPerfilActionPerformed(evt);
			}
		});

		btnSiguiente.setText("Siguiente");
		btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				siguientePerfilActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout controlJPanelLayout = new javax.swing.GroupLayout(controlJPanel);
		controlJPanelLayout.setHorizontalGroup(controlJPanelLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(controlJPanelLayout.createSequentialGroup().addContainerGap().addGroup(controlJPanelLayout
						.createParallelGroup(Alignment.LEADING)
						.addGroup(controlJPanelLayout.createSequentialGroup()
								.addGroup(controlJPanelLayout.createParallelGroup(Alignment.LEADING)
										.addComponent(btnGuardarPerfil, GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(btnCargarPerfil, GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(btnVerPerfil, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(btnCrearPerfil, GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(btnAnterior, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(btnSiguiente, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE))
								.addContainerGap(50, Short.MAX_VALUE)))));
		controlJPanelLayout.setVerticalGroup(controlJPanelLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(controlJPanelLayout.createSequentialGroup().addGap(60).addComponent(btnCrearPerfil).addGap(60)
						.addComponent(btnVerPerfil).addGap(60).addComponent(btnCargarPerfil).addGap(60)
						.addComponent(btnGuardarPerfil).addGap(60).addComponent(btnAnterior).addGap(60)
						.addComponent(btnSiguiente).addContainerGap(60, Short.MAX_VALUE)));
		controlJPanel.setLayout(controlJPanelLayout);

		jSplitPane1.setLeftComponent(controlJPanel);

		javax.swing.GroupLayout displayJPanelLayout = new javax.swing.GroupLayout(displayJPanel);
		displayJPanel.setLayout(displayJPanelLayout);
		displayJPanelLayout.setHorizontalGroup(displayJPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 850, Short.MAX_VALUE));
		displayJPanelLayout.setVerticalGroup(displayJPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 625, Short.MAX_VALUE));

		jSplitPane1.setRightComponent(displayJPanel);

		getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Función que al hacer una acción (click) sobre el botón de crear perfil,
	 * creará y mostrará el display de la parte de creación de perfil
	 * 
	 * @param evt que guarda el evento de action performed
	 */
	private void crearPerfilActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_createPersonActionPerformed
		// TODO add your handling code here:
		CreateJPanel createJPanel = new CreateJPanel();
		jSplitPane1.setRightComponent(createJPanel);
	}// GEN-LAST:event_createPersonActionPerformed

	/**
	 * Función que al hacer una acción (click) sobre el botón de ver perfil, hará
	 * una comprobación del tamaño de la lista, y si hay algún objeto, entonces
	 * creará y mostrará el display de la visualización de perfil. Si no hay ningún
	 * objeto en la lista mostrará un mensaje indicandolo
	 * 
	 * @param evt que guarda el evento de action performed
	 */
	private void verPerfilActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewPersonActionPerformed
		// TODO add your handling code here:
		if (lista.size() == 0) {
			JOptionPane.showMessageDialog(null, "No hay ningún perfil creado");
		} else {
			numPerfil = person.getNumPerfiles() - 1;
			DisplayJPanel viewJPanel = new DisplayJPanel(lista, numPerfil);
			jSplitPane1.setRightComponent(viewJPanel);
		}
	}// GEN-LAST:event_viewPersonActionPerformed

	/**
	 * Función que al hacer una acción (click) sobre el botón de cargar perfil,
	 * leerá del fichero perfiles.txt que estuviese en la carpeta del proyecto,
	 * manejando distintas exepciones si ocurre algún imprevisto, si todo va
	 * correcto, añadirá los perfiles a la lista y se mostrará el último perfil. Por
	 * último muestra un mensaje de éxito
	 * 
	 * @param evt que guarda el evento de action performed
	 */
	private void cargarPerfilActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewPersonActionPerformed
		// TODO add your handling code here:
		try {
			FileReader fr = new FileReader("perfiles.txt");
			BufferedReader br = new BufferedReader(fr);
			Scanner sf = new Scanner(br);

			if (!(sf.hasNext())) {
				JOptionPane.showMessageDialog(null, "No hay datos en el fichero");
				br.close();
			} else {
				if (lista.size() != 0) {
					lista.clear();
					numPerfil = -1;
					person.setNumPerfiles(0);
				}
				while (sf.hasNext()) {
					sf.next();
					person = new Person(sf.next(), sf.next(), sf.next(), sf.next(), sf.next(), sf.next(), sf.next(),
							sf.next(), sf.next(), sf.next(), sf.nextInt());
					lista.add(person);
					numPerfil++;
				}
				JOptionPane.showMessageDialog(null,
						"Datos cargados correctamente. El perfil actual es el " + numPerfil);

				DisplayJPanel viewJPanel = new DisplayJPanel(lista, numPerfil);
				jSplitPane1.setRightComponent(viewJPanel);
				br.close();
			}
		} catch (FileNotFoundException e1) {
			JOptionPane.showMessageDialog(null, "Error: Fichero no encontrado");
		} catch (IOException e2) {
			JOptionPane.showMessageDialog(null, "Error de E/S");
		} catch (NoSuchElementException e3) {
			JOptionPane.showMessageDialog(null, "Error de lectura de parte del fichero");
		}
	}// GEN-LAST:event_viewPersonActionPerformed

	/**
	 * Función que al hacer una acción (click) sobre el botón de guardar perfil,
	 * hará una comprobación del tamaño de la lista, y si hay algún objeto, entonces
	 * escribirá sobre el archivo perfiles.txt que estuviese en la carpeta del
	 * proyecto (si no está lo crea), añadiendo al archivo los datos de los
	 * distintos perfiles. Por último muestra un mensaje de éxito. Si no hay ningún
	 * objeto en la lista mostrará un mensaje indicandolo
	 * 
	 * @param evt que guarda el evento de action performed
	 */
	private void guardarPerfilActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewPersonActionPerformed
		// TODO add your handling code here:
		if (lista.size() == 0) {
			JOptionPane.showMessageDialog(null, "No hay ningún perfil creado");
		} else {
			try {
				FileWriter fw = new FileWriter("perfiles.txt");
				BufferedWriter bw = new BufferedWriter(fw);
				PrintWriter pw = new PrintWriter(bw);

				for (int i = 0; i < lista.size(); i++) {
					pw.write(lista.get(i).getCodigo() + "\n");
					pw.write(lista.get(i).getNombre() + "\n");
					pw.write(lista.get(i).getPais() + "\n");
					pw.write(lista.get(i).getFechaNacimiento() + "\n");
					pw.write(lista.get(i).getTelefono() + "\n");
					pw.write(lista.get(i).getEmail() + "\n");
					pw.write(lista.get(i).getNumeroSS() + "\n");
					pw.write(lista.get(i).getNumCuentaBancaria() + "\n");
					pw.write(lista.get(i).getFechaIncorporacion() + "\n");
					pw.write(lista.get(i).getDepartamento() + "\n");
					pw.write(lista.get(i).getImagetxt() + "\n");
					pw.write(lista.get(i).getSueldo() + "\n");
				}
				JOptionPane.showMessageDialog(null, "Perfil/es guardado/s correctamente");
				pw.close();
			} catch (FileNotFoundException e1) {
				JOptionPane.showMessageDialog(null, "Error: Fichero no encontrado");
			} catch (IOException e2) {
				JOptionPane.showMessageDialog(null, "Error de E/S");
			}
		}
	}// GEN-LAST:event_viewPersonActionPerformed

	/**
	 * Función que al hacer una acción (click) sobre el botón de anterior, hará una
	 * comprobación del tamaño de la lista, y si hay algún objeto, entonces creará y
	 * mostrará el display de la visualización del perfil anterior al actual.
	 * Actualizará también el número del perfil actual. Si ya estuviese en el primer
	 * perfil, se quedaría en el mismo mostrando un mensaje indicandolo. Si no hay
	 * ningún objeto en la lista mostrará un mensaje indicandolo
	 * 
	 * @param evt que guarda el evento de action performed
	 */
	private void anteriorPerfilActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_createPersonActionPerformed
		// TODO add your handling code here:
		if (lista.size() == 0) {
			JOptionPane.showMessageDialog(null, "No hay ningún perfil creado");
		} else {
			numPerfil--;
			if (numPerfil < 0) {
				numPerfil = 0;
				JOptionPane.showMessageDialog(null, "Ya estas en el primer perfil creado");
			} else {
				DisplayJPanel viewJPanel = new DisplayJPanel(lista, numPerfil);
				jSplitPane1.setRightComponent(viewJPanel);
			}
		}
	}// GEN-LAST:event_createPersonActionPerformed

	/**
	 * Función que al hacer una acción (click) sobre el botón de siguiente, hará una
	 * comprobación del tamaño de la lista, y si hay algún objeto, entonces creará y
	 * mostrará el display de la visualización del perfil siguiente al actual.
	 * Actualizará también el número del perfil actual. Si ya estuviese en el último
	 * perfil, se quedaría en el mismo mostrando un mensaje indicandolo. Si no hay
	 * ningún objeto en la lista mostrará un mensaje indicandolo
	 * 
	 * @param evt que guarda el evento de action performed
	 */
	private void siguientePerfilActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_createPersonActionPerformed
		// TODO add your handling code here:
		if (lista.size() == 0) {
			JOptionPane.showMessageDialog(null, "No hay ningún perfil creado");
		} else {
			numPerfil++;
			if (numPerfil >= person.getNumPerfiles()) {
				JOptionPane.showMessageDialog(null, "Ya estas en el último perfil creado");
				numPerfil--;
			} else {
				DisplayJPanel viewJPanel = new DisplayJPanel(lista, numPerfil);
				jSplitPane1.setRightComponent(viewJPanel);
			}
		}
	}// GEN-LAST:event_createPersonActionPerformed

	/**
	 * Metodo main de la aplicación
	 * 
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainJFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel controlJPanel;
	private javax.swing.JButton btnCrearPerfil;
	private javax.swing.JPanel displayJPanel;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JButton btnVerPerfil;
	private javax.swing.JButton btnCargarPerfil;
	private javax.swing.JButton btnGuardarPerfil;
	private javax.swing.JButton btnAnterior;
	private javax.swing.JButton btnSiguiente;
}
